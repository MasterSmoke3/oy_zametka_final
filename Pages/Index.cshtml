@page
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@model ZametkiApp.Pages.IndexModel
@{
    ViewData["Title"] = "–ì–ª–∞–≤–Ω–∞—è";
}
<h1 class="text-light mb-4">–ó–∞–º–µ—Ç–∫–∏</h1>

<form method="get" class="row g-2 mb-4">
    <div class="col-md-5">
        <input type="text" id="searchInput" name="SearchTerm" value="@Model.SearchTerm" class="form-control" placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º..." />
    </div>
    <div class="col-md-4">
        <select name="SortOrder" class="form-select" onchange="this.form.submit()">
            <option value="" selected="@(Model.SortOrder == null ? "selected" : null)">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
            <option value="newest" selected="@(Model.SortOrder == "newest" ? "selected" : null)">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
            <option value="oldest" selected="@(Model.SortOrder == "oldest" ? "selected" : null)">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</option>
        </select>
    </div>
    <div class="col-md-3 text-end">
        <a asp-page="/Create" class="btn btn-success w-100 mb-2">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É</a>
        <a asp-page="/Expired" class="btn btn-outline-danger w-100">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</a>
    </div>
</form>

@if (!string.IsNullOrWhiteSpace(Model.SearchTerm))
{
    <div class="mb-3">
        <a asp-page="/Index" class="btn btn-outline-secondary">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∑–∞–º–µ—Ç–∫–∞–º</a>
    </div>
}

@if (Model.Notes != null && Model.Notes.Any())
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="notesContainer">
        @foreach (var note in Model.Notes)
        {
            var isOverdue = note.Deadline.HasValue && note.Deadline.Value < DateTime.Now;
            <div class="col note-card" data-title="@note.Title.ToLower()" data-description="@note.Description.ToLower()">
                <div class="card shadow-sm border-0 h-100 @(isOverdue ? "border-danger" : "")">
                    <div class="card-body d-flex flex-column justify-content-between">
                        <div>
                            <h5 class="card-title">
                                @if (note.IsPinned)
                                {
                                    <span>üìå</span>
                                }
                                @note.Title
                            </h5>
                            <p class="card-text text-muted mb-1">@note.Description</p>

                            @if (!string.IsNullOrWhiteSpace(note.ReminderText))
                            {
                                <small class="text-warning d-block">üîî @note.ReminderText</small>
                            }

                            @if (note.Deadline.HasValue)
                            {
                                <small class="d-block @(isOverdue ? "text-danger" : "text-muted")">
                                    ‚è≥ @note.Deadline.Value.ToString("dd.MM.yyyy HH:mm")
                                </small>
                            }
                        </div>

                        <div class="mt-3 d-flex justify-content-between align-items-center">
                            <div class="text-muted small">
                                <div>üìÖ @note.CreatedAt.ToString("dd.MM.yyyy")</div>
                                <div>üîÑ @note.UpdatedAt.ToString("dd.MM.yyyy")</div>
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                    ‚ãÆ
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li>
                                        <a asp-page="/Edit" asp-route-id="@note.Id" class="dropdown-item">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a>
                                    </li>
                                    <li>
                                        <a asp-page="/Delete" asp-route-id="@note.Id" class="dropdown-item text-danger">üóë –£–¥–∞–ª–∏—Ç—å</a>
                                    </li>
                                    <li>
                                        <form method="post" asp-page-handler="TogglePin" asp-route-id="@note.Id">
                                            <button type="submit" class="dropdown-item">
                                                @(note.IsPinned ? "–û—Ç–∫—Ä–µ–ø–∏—Ç—å" : "–ó–∞–∫—Ä–µ–ø–∏—Ç—å")
                                            </button>
                                        </form>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p class="text-muted">–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
}

@section Scripts {
    <script>
        const notesWithDeadlines = [
            @foreach (var note in Model.Notes.Where(n => n.Deadline.HasValue))
            {
                <text>
                {
                    id: @note.Id,
                    title: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(note.Title)),
                    reminderText: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(note.ReminderText ?? "")),
                    deadline: "@note.Deadline.Value.ToString("yyyy-MM-ddTHH:mm:ss")"
                },
                </text>
            }
        ];

        let notifiedNotes = {};

        function showNotification(title, body) {
            if (Notification.permission !== "granted") return;

            const options = {
                body: body,
                icon: "/favicon.ico",
                actions: [
                    { action: "snooze", title: "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 5 –º–∏–Ω" }
                ],
                data: { body: body }
            };

            if (navigator.serviceWorker && navigator.serviceWorker.ready) {
                navigator.serviceWorker.ready.then(reg => {
                    reg.showNotification(title, options);
                });
            } else {
                new Notification(title, options); // fallback
            }
        }

        function checkDeadlines() {
            const now = new Date();
            notesWithDeadlines.forEach(note => {
                const deadline = new Date(note.deadline);
                const noteId = note.id;

                const isDue = Math.abs(now - deadline) < 15000;
                if (!notifiedNotes[noteId] && isDue) {
                    showNotification(note.title, note.reminderText || "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ");
                    notifiedNotes[noteId] = true;
                }
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            if (Notification.permission !== "granted") {
                Notification.requestPermission();
            }
            setInterval(checkDeadlines, 10000);
        });

        // LIVE-–ø–æ–∏—Å–∫
        document.getElementById('searchInput').addEventListener('input', function () {
            const searchValue = this.value.toLowerCase();
            const cards = document.querySelectorAll('.note-card');

            cards.forEach(card => {
                const title = card.getAttribute('data-title');
                const description = card.getAttribute('data-description');

                if (title.includes(searchValue) || description.includes(searchValue)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    </script>
}
